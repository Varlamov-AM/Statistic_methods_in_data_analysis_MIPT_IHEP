/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MyPdfV3.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(MyPdfV3); 

 MyPdfV3::MyPdfV3(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _A,
                        RooAbsReal& _B) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   A("A","A",this,_A),
   B("B","B",this,_B)
 { 
 } 


 MyPdfV3::MyPdfV3(const MyPdfV3& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   A("A",this,other.A),
   B("B",this,other.B)
 { 
 } 



 double MyPdfV3::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return exp(A * x)*abs(sin(B * x)); 
 } 



 Int_t MyPdfV3::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED, 
   // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS 
   // THE EXAMPLE BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X
   // YOU CAN ALSO IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs 
   // EXPRESSION MULTIPLE TIMES

   if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 double MyPdfV3::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY getAnalyticalIntegral
   // THE MEMBER FUNCTION x.min(rangeName) AND x.max(rangeName) WILL RETURN THE INTEGRATION
   // BOUNDARIES FOR EACH OBSERVABLE x max(rangeName)

   if (code==1) { return ((exp(A*x.max(rangeName))*(sin(B*x.max(rangeName))/abs(sin(B * x.max(rangeName))))*(A*sin(B*x.max(rangeName)) - B*cos(B*x.max(rangeName))))/(pow(A, 2) + pow(B, 2)) - 
                          (exp(A*x.min(rangeName))*(sin(B*x.min(rangeName))/abs(sin(B * x.min(rangeName))))*(A*sin(B*x.min(rangeName)) - B*cos(B*x.min(rangeName))))/(pow(A, 2) + pow(B, 2))) ; } 
   return 0 ; 
 } 



